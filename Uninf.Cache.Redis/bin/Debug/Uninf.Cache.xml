<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uninf.Cache</name>
    </assembly>
    <members>
        <member name="T:Uninf.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:Uninf.Cache.ICache.Get``2(``1)">
            <summary>
            通过key获取实体，实体必须有命名为id的属性作为唯一标识
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TKey">实体key类型</typeparam>
            <param name="key">实体key值</param>
            <returns>实体</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.Gets``2(``1[])">
            <summary>
            通过key数组批量获取实体，实体必须有命名为id的属性作为唯一标识
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TKey">实体key类型</typeparam>
            <param name="keys">实体keys数组.</param>
            <returns>字典，key为传入的实体key，值为对应的实体</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.Set``1(``0)">
            <summary>
            保存实体到缓存，实体必须有命名为id的属性作为唯一标识
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="item">实体值</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Set``1(``0,System.DateTime)">
            <summary>
            保存实体到缓存，实体必须有命名为id的属性作为唯一标识
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="item">实体值</param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Delete(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存key</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Delete``1(``0)">
            <summary>
            删除实体缓存，实体必须有命名为id的属性作为唯一标识
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="item">实体值</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Delete``2(``1)">
            <summary>
            通过实体key删除缓存
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TKey">实体key类型</typeparam>
            <param name="key">实体key值</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Deletes``2(``1[])">
            <summary>
            批量删除
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TKey">实体key类型</typeparam>
            <param name="keys">实体key值集合</param>
        </member>
        <member name="M:Uninf.Cache.ICache.ContainsKey(System.String)">
            <summary>
            缓存中是否存在
            </summary>
            <param name="key">缓存key.</param>
            <returns>存在返回<c>true</c>否则返回<c>false</c>.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.SaveToList``1(``0[])">
            <summary>
            Saves to list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.AddToList``1(``0)">
            <summary>
            Adds to list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.DeleteFromList``1(``0)">
            <summary>
            Deletes from list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.ClearList``1">
            <summary>
            Clears the list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uninf.Cache.ICache.GetAll``1">
            <summary>
            Gets all.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.ContainsList``1">
            <summary>
            Determines whether this instance contains list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if this instance contains list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.ContainsPage``1">
            <summary>
            Determines whether this instance contains page.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if this instance contains page; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.SaveRelated``3(System.String,``2,``1[])">
            <summary>
            Saves the related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.AddToRelated``3(System.String,``2,``1)">
            <summary>
            Adds to related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.RemoveFromRelated``3(System.String,``2,System.Object)">
            <summary>
            Removes from related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.GetAllRelated``3(System.String,``2)">
            <summary>
            Gets all related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <returns>IEnumerable&lt;TChild&gt;.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.ClearRelated``3(System.String,``2)">
            <summary>
            Clears the related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.ContainsRelated``2(System.String,System.Object)">
            <summary>
            Determines whether the specified name contains related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <param name="name">The name.</param>
            <param name="pid">The pid.</param>
            <returns><c>true</c> if the specified name contains related; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.SaveToPage``1(System.Func{``0,System.Int64},``0[])">
            <summary>
            Saves to page.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="score">The score.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.SaveToPage``3(System.String,``2,System.Func{``1,System.Int64},``1[])">
            <summary>
            Saves to page.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="score">The score.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.RemoveFromPage``1(``0[])">
            <summary>
            Removes from page.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.RemoveFromPage``3(System.String,``2,``1[])">
            <summary>
            Removes from page.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.ClearPage``1">
            <summary>
            Clears the page.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uninf.Cache.ICache.ClearPage``3(System.String,``2)">
            <summary>
            Clears the page.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Page``1(System.Int32,System.Int32,System.Int64@,System.Boolean)">
            <summary>
            Pages the specified skip.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <param name="allCount">All count.</param>
            <param name="desc">if set to <c>true</c> [desc].</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.PageRelated``3(System.String,System.Object,System.Int32,System.Int32,System.Int64@,System.Boolean)">
            <summary>
            Pages the related.
            </summary>
            <typeparam name="TMain">The type of the t main.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <typeparam name="TMainKey">The type of the t main key.</typeparam>
            <param name="name">The name.</param>
            <param name="pid">The pid.</param>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <param name="allCount">All count.</param>
            <param name="desc">if set to <c>true</c> [desc].</param>
            <returns>IEnumerable&lt;TChild&gt;.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.ContainsRelatedPage``1(System.String,System.Object)">
            <summary>
            Determines whether [contains related page] [the specified name].
            </summary>
            <typeparam name="TChild">The type of the t child.</typeparam>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <returns><c>true</c> if [contains related page] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.AddToList(System.String,System.String)">
            <summary>
            Adds to list.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.RemoveFromList(System.String,System.String)">
            <summary>
            Removes from list.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.GetAllFromList(System.String)">
            <summary>
            Gets all from list.
            </summary>
            <param name="key">The key.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.GetPageFromList(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the page from list.
            </summary>
            <param name="key">The key.</param>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.SetItemInList(System.String,System.Int32,System.String)">
            <summary>
            Sets the item in list.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.GetItemInList(System.String,System.Int32)">
            <summary>
            Gets the item in list.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.ClearList(System.String)">
            <summary>
            Clears the list.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.ExpireAt(System.String,System.DateTime)">
            <summary>
            Expires at.
            </summary>
            <param name="key">The key.</param>
            <param name="datetime">The datetime.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Set``1(System.String,``0)">
            <summary>
            Sets the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Sets the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expire">The expire.</param>
        </member>
        <member name="M:Uninf.Cache.ICache.Increment(System.String,System.UInt32)">
            <summary>
            Increments the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.Decrement(System.String,System.UInt32)">
            <summary>
            Decrements the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.Get``1(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Uninf.Cache.ICache.GetAll``1(System.String[])">
            <summary>
            Gets all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">The keys.</param>
            <returns>IDictionary&lt;System.String, T&gt;.</returns>
        </member>
    </members>
</doc>
